{"ast":null,"code":"import weatherServices from \"../services/weatherServices\";\nimport weatherServiceMetaweather from \"../services/weatherServiceMetaweather\";\nexport var WEATHER_REQUEST = \"WEATHER_REQUEST\";\nexport var WEATHER_SUCCESS = \"WEATHER_SUCCESS\";\nexport var WEATHER_FAIL = \"WEATHER_FAIL\";\nexport function getWeather(city, weatherServise) {\n  return function (dispatch) {\n    dispatch({\n      type: WEATHER_REQUEST\n    });\n\n    if (weatherServise === \"Openweathermap\") {\n      weatherServices.getWeather(city).then(function (response) {\n        return response.json();\n      }).then(function (jsonData) {\n        var responce = {\n          city: city,\n          lastUpdate: new Date().getHours(),\n          temprature: jsonData.main.temp,\n          humidity: jsonData.main.humidity,\n          visibility: jsonData.visibility,\n          pressure: jsonData.main.pressure,\n          description: jsonData.weather[0].main,\n          wind: jsonData.wind.speed\n        };\n        return responce;\n      }).then(function (data) {\n        console.log(data, \"datajson\");\n        dispatch({\n          type: WEATHER_SUCCESS,\n          payload: data\n        });\n        dispatch({\n          type: \"SET_CITYOPENWEATHERMAPWEATHER\",\n          payload: data\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: WEATHER_FAIL,\n          error: true,\n          payload: error\n        });\n      });\n    }\n\n    if (weatherServise === \"MetaWeather\") {\n      weatherServiceMetaweather.getWeather(city).then(function (response) {\n        return response.json();\n      }).then(function (jsonData) {\n        console.log(jsonData, \"jsonData\");\n        var data = jsonData.data[0];\n        var responce = {\n          city: city,\n          lastUpdate: new Date().getHours(),\n          temprature: data.temp,\n          humidity: data.rh,\n          visibility: data.vis * 1000,\n          pressure: data.pres.toFixed(1),\n          description: data.weather.description,\n          wind: data.wind_spd.toFixed(0)\n        };\n        return responce;\n      }).then(function (data) {\n        console.log(data, \"datajson\");\n        dispatch({\n          type: WEATHER_SUCCESS,\n          payload: data\n        });\n        dispatch({\n          type: \"SET_CITYMETAWEATHER\",\n          payload: data\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: WEATHER_FAIL,\n          error: true,\n          payload: error\n        });\n      });\n    }\n  };\n}","map":{"version":3,"sources":["E:\\react\\weatherWithMiddleware\\src\\actions\\weatherAction.js"],"names":["weatherServices","weatherServiceMetaweather","WEATHER_REQUEST","WEATHER_SUCCESS","WEATHER_FAIL","getWeather","city","weatherServise","dispatch","type","then","response","json","jsonData","responce","lastUpdate","Date","getHours","temprature","main","temp","humidity","visibility","pressure","description","weather","wind","speed","data","console","log","payload","catch","error","rh","vis","pres","toFixed","wind_spd"],"mappings":"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","sourcesContent":["import weatherServices from \"../services/weatherServices\";\r\nimport weatherServiceMetaweather from \"../services/weatherServiceMetaweather\";\r\nexport const WEATHER_REQUEST = \"WEATHER_REQUEST\";\r\nexport const WEATHER_SUCCESS = \"WEATHER_SUCCESS\";\r\nexport const WEATHER_FAIL = \"WEATHER_FAIL\";\r\n\r\nexport function getWeather(city, weatherServise) {\r\n  return function(dispatch) {\r\n    dispatch({\r\n      type: WEATHER_REQUEST\r\n    });\r\n    if (weatherServise === \"Openweathermap\") {\r\n      weatherServices\r\n        .getWeather(city)\r\n        .then(response => response.json())\r\n        .then(jsonData => {\r\n          let responce = {\r\n            city: city,\r\n            lastUpdate: new Date().getHours(),\r\n            temprature: jsonData.main.temp,\r\n            humidity: jsonData.main.humidity,\r\n            visibility: jsonData.visibility,\r\n            pressure: jsonData.main.pressure,\r\n            description: jsonData.weather[0].main,\r\n            wind: jsonData.wind.speed\r\n          };\r\n          return responce;\r\n        })\r\n        .then(data => {\r\n          console.log(data, \"datajson\");\r\n          dispatch({\r\n            type: WEATHER_SUCCESS,\r\n            payload: data\r\n          });\r\n          dispatch({\r\n            type: \"SET_CITYOPENWEATHERMAPWEATHER\",\r\n            payload: data\r\n          });\r\n        })\r\n        .catch(error => {\r\n          dispatch({\r\n            type: WEATHER_FAIL,\r\n            error: true,\r\n            payload: error\r\n          });\r\n        });\r\n    }\r\n    if (weatherServise === \"MetaWeather\") {\r\n      weatherServiceMetaweather\r\n        .getWeather(city)\r\n        .then(response => response.json())\r\n        .then(jsonData => {\r\n          console.log(jsonData, \"jsonData\");\r\n          let data = jsonData.data[0];\r\n          let responce = {\r\n            city: city,\r\n            lastUpdate: new Date().getHours(),\r\n            temprature: data.temp,\r\n            humidity: data.rh,\r\n            visibility: data.vis * 1000,\r\n            pressure: data.pres.toFixed(1),\r\n            description: data.weather.description,\r\n            wind: data.wind_spd.toFixed(0)\r\n          };\r\n          return responce;\r\n        })\r\n        .then(data => {\r\n          console.log(data, \"datajson\");\r\n          dispatch({\r\n            type: WEATHER_SUCCESS,\r\n            payload: data\r\n          });\r\n          dispatch({\r\n            type: \"SET_CITYMETAWEATHER\",\r\n            payload: data\r\n          });\r\n        })\r\n        .catch(error => {\r\n          dispatch({\r\n            type: WEATHER_FAIL,\r\n            error: true,\r\n            payload: error\r\n          });\r\n        });\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
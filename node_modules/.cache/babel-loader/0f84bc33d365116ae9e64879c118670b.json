{"ast":null,"code":"import _classCallCheck from \"E:\\\\react\\\\weatherWithMiddleware\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\react\\\\weatherWithMiddleware\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\react\\\\weatherWithMiddleware\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\react\\\\weatherWithMiddleware\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\react\\\\weatherWithMiddleware\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\react\\\\weatherWithMiddleware\\\\src\\\\components\\\\App.js\";\nimport React, { PureComponent } from \"react\";\nimport LocationService from \"../services/LocationService\";\nimport setPrevWeather from \"../actions/prevWeatherAction\";\nimport SearchWeather from \"./SearchWeather\";\nimport DescriptionWeather from \"./DescriptionWeather\";\nimport Input from \"./Input\";\nimport Details from \"./Details\";\nimport Loading from \"./Loading\";\nimport WeatherServise from \"./WeatherServise\";\nimport { connect } from \"react-redux\";\nimport { getWeather } from \"../actions/weatherAction\";\nimport { setWeatherServise } from \"../actions/weatherServiseAction\";\nimport PropTypes from \"prop-types\";\n\nvar App =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(App, _PureComponent);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      error: false\n    };\n\n    _this.componentDidMount = function () {\n      var city = _this.props.weather.weather.city; // if first enter on the app\n\n      if (!city) {\n        //avoid  block of fetch data\n        setTimeout(LocationService.getIp().then(function (response) {\n          return response.json();\n        }).then(function (jsonData) {\n          return jsonData.ip;\n        }).then(function (data) {\n          return LocationService.getCity(data);\n        }).then(function (responce) {\n          return responce.json();\n        }).then(function (jsonData) {\n          if (jsonData.region_name) {\n            var _city = jsonData.region_name.split(\" \")[1].toUpperCase();\n\n            _this.searchWeatherForCity(_city);\n          }\n\n          if (jsonData.error) {\n            _this.setState({\n              error: true\n            });\n          }\n        }).catch(function (error) {\n          _this.setState({\n            error: true\n          });\n\n          console.log(error.message, \"error LocationService\");\n        }), 3500);\n      }\n    };\n\n    _this.searchWeatherForCity = function (city) {\n      var weatherServise = _this.props.weatherServise.weatherServise;\n      var _this$props = _this.props,\n          setWeatherAction = _this$props.setWeatherAction,\n          prevWeatherAction = _this$props.prevWeatherAction,\n          loadedCityWeatherOpenweathermap = _this$props.loadedCityWeatherOpenweathermap,\n          loadedCityWeatherMetaweather = _this$props.loadedCityWeatherMetaweather;\n\n      if (_this.state.error) {\n        _this.setState({\n          error: false\n        });\n      }\n\n      if (weatherServise === \"Openweathermap\") {\n        if (loadedCityWeatherOpenweathermap[city]) {\n          console.log(\"current city weather excist\");\n\n          if (new Date().getHours() - loadedCityWeatherOpenweathermap[city].lastUpdate < 2) {\n            var cityWeather = loadedCityWeatherOpenweathermap[city];\n            prevWeatherAction(cityWeather);\n          } else {\n            setWeatherAction(city, weatherServise);\n          }\n        } else {\n          setWeatherAction(city, weatherServise);\n        }\n      }\n\n      if (weatherServise === \"MetaWeather\") {\n        if (loadedCityWeatherMetaweather[city]) {\n          console.log(\"current city weather excist\");\n\n          if (new Date().getHours() - loadedCityWeatherMetaweather[city].lastUpdate < 2) {\n            var _cityWeather = loadedCityWeatherMetaweather[city];\n            prevWeatherAction(_cityWeather);\n          } else {\n            setWeatherAction(city, weatherServise);\n          }\n        } else {\n          setWeatherAction(city, weatherServise);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var setWeatherServiseAction = this.props.setWeatherServiseAction;\n      var city = this.props.weather.weather.city;\n      var weatherServise = this.props.weatherServise.weatherServise;\n      var weather = this.props.weather.weather;\n      var _this$props$weather = this.props.weather,\n          isFetching = _this$props$weather.isFetching,\n          error = _this$props$weather.error;\n      return React.createElement(\"div\", {\n        className: new Date().getHours() < 7 || new Date().getHours() > 20 ? \"App night\" : \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"searchBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(WeatherServise, {\n        weatherServise: weatherServise,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(Input, {\n        searchWeatherForCity: this.searchWeatherForCity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(SearchWeather, {\n        setWeatherServise: setWeatherServiseAction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), this.state.error && React.createElement(\"div\", {\n        className: \"errorBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Reload page or try it in another time (may be you are blocked)\"), error ? React.createElement(\"div\", {\n        className: \"errorBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Correct entered data or reload page and repeat response\") : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, isFetching && React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }) || React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(DescriptionWeather, {\n        city: city,\n        weather: weather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Details, {\n        weather: weather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(PureComponent);\n\nApp.propTypes = {\n  weatherServise: PropTypes.object.isRequired,\n  weather: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(store) {\n  console.log(store, \"store\");\n  return {\n    weatherServise: store.weatherServise,\n    weather: store.weather,\n    loadedCityWeatherOpenweathermap: store.loadedCityWeatherOpenweathermap,\n    loadedCityWeatherMetaweather: store.loadedCityWeatherMetaweather\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    prevWeatherAction: function prevWeatherAction(weather) {\n      return dispatch(setPrevWeather(weather));\n    },\n    setWeatherServiseAction: function setWeatherServiseAction(servise) {\n      return dispatch(setWeatherServise(servise));\n    },\n    setWeatherAction: function setWeatherAction(weather, weatherServise) {\n      return dispatch(getWeather(weather, weatherServise));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["E:\\react\\weatherWithMiddleware\\src\\components\\App.js"],"names":["React","PureComponent","LocationService","setPrevWeather","SearchWeather","DescriptionWeather","Input","Details","Loading","WeatherServise","connect","getWeather","setWeatherServise","PropTypes","App","state","error","componentDidMount","city","props","weather","setTimeout","getIp","then","response","json","jsonData","ip","data","getCity","responce","region_name","split","toUpperCase","searchWeatherForCity","setState","catch","console","log","message","weatherServise","setWeatherAction","prevWeatherAction","loadedCityWeatherOpenweathermap","loadedCityWeatherMetaweather","Date","getHours","lastUpdate","cityWeather","setWeatherServiseAction","isFetching","propTypes","object","isRequired","mapStateToProps","store","mapDispatchToProps","dispatch","servise"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport LocationService from \"../services/LocationService\";\r\nimport setPrevWeather from \"../actions/prevWeatherAction\";\r\nimport SearchWeather from \"./SearchWeather\";\r\nimport DescriptionWeather from \"./DescriptionWeather\";\r\nimport Input from \"./Input\";\r\nimport Details from \"./Details\";\r\nimport Loading from \"./Loading\";\r\nimport WeatherServise from \"./WeatherServise\";\r\nimport { connect } from \"react-redux\";\r\nimport { getWeather } from \"../actions/weatherAction\";\r\nimport { setWeatherServise } from \"../actions/weatherServiseAction\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass App extends PureComponent {\r\n  state = {\r\n    error: false\r\n  };\r\n  componentDidMount = () => {\r\n    const { city } = this.props.weather.weather;\r\n    // if first enter on the app\r\n    if (!city) {\r\n      //avoid  block of fetch data\r\n      setTimeout(\r\n        LocationService.getIp()\r\n          .then(response => response.json())\r\n          .then(jsonData => {\r\n            return jsonData.ip;\r\n          })\r\n          .then(data => LocationService.getCity(data))\r\n          .then(responce => responce.json())\r\n          .then(jsonData => {\r\n            if (jsonData.region_name) {\r\n              let city = jsonData.region_name.split(\" \")[1].toUpperCase();\r\n              this.searchWeatherForCity(city);\r\n            }\r\n            if(jsonData.error){\r\n              this.setState({ error: true });\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.setState({ error: true });\r\n            console.log(error.message, \"error LocationService\");\r\n          }),\r\n        3500\r\n      );\r\n    }\r\n  };\r\n\r\n  searchWeatherForCity = city => {\r\n    const { weatherServise } = this.props.weatherServise;\r\n    const {\r\n      setWeatherAction,\r\n      prevWeatherAction,\r\n      loadedCityWeatherOpenweathermap,\r\n      loadedCityWeatherMetaweather\r\n    } = this.props;\r\n   if(this.state.error){\r\n    this.setState({ error: false });\r\n   }\r\n    if (weatherServise === \"Openweathermap\") {\r\n      if (loadedCityWeatherOpenweathermap[city]) {\r\n        console.log(\"current city weather excist\");\r\n        if (\r\n          new Date().getHours() -\r\n            loadedCityWeatherOpenweathermap[city].lastUpdate <\r\n          2\r\n        ) {\r\n          let cityWeather = loadedCityWeatherOpenweathermap[city];\r\n          prevWeatherAction(cityWeather);\r\n        } else {\r\n          setWeatherAction(city, weatherServise);\r\n        }\r\n      } else {\r\n        setWeatherAction(city, weatherServise);\r\n      }\r\n    }\r\n    if (weatherServise === \"MetaWeather\") {\r\n      if (loadedCityWeatherMetaweather[city]) {\r\n        console.log(\"current city weather excist\");\r\n        if (\r\n          new Date().getHours() -\r\n            loadedCityWeatherMetaweather[city].lastUpdate <\r\n          2\r\n        ) {\r\n          let cityWeather = loadedCityWeatherMetaweather[city];\r\n          prevWeatherAction(cityWeather);\r\n        } else {\r\n          setWeatherAction(city, weatherServise);\r\n        }\r\n      } else {\r\n        setWeatherAction(city, weatherServise);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { setWeatherServiseAction } = this.props;\r\n    const { city } = this.props.weather.weather;\r\n    const { weatherServise } = this.props.weatherServise;\r\n    const { weather } = this.props.weather;\r\n    const { isFetching, error } = this.props.weather;\r\n    return (\r\n      <div\r\n        className={\r\n          new Date().getHours() < 7 || new Date().getHours() > 20\r\n            ? \"App night\"\r\n            : \"App\"\r\n        }\r\n      >\r\n        <div className=\"searchBlock\">\r\n          <WeatherServise weatherServise={weatherServise} />\r\n          <Input searchWeatherForCity={this.searchWeatherForCity} />\r\n          <SearchWeather setWeatherServise={setWeatherServiseAction} />\r\n        </div>\r\n\r\n        {this.state.error && (\r\n          <div className=\"errorBlock\">\r\n            Reload page or try it in another time (may be you are blocked)\r\n          </div>\r\n        )}\r\n        {error ? (\r\n          <div className=\"errorBlock\">\r\n            Correct entered data or reload page and repeat response\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {(isFetching && <Loading />) || (\r\n              <div>\r\n                <DescriptionWeather city={city} weather={weather} />\r\n                <Details weather={weather} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  weatherServise: PropTypes.object.isRequired,\r\n  weather: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  console.log(store, \"store\");\r\n  return {\r\n    weatherServise: store.weatherServise,\r\n    weather: store.weather,\r\n    loadedCityWeatherOpenweathermap: store.loadedCityWeatherOpenweathermap,\r\n    loadedCityWeatherMetaweather: store.loadedCityWeatherMetaweather\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    prevWeatherAction: weather => dispatch(setPrevWeather(weather)),\r\n    setWeatherServiseAction: servise => dispatch(setWeatherServise(servise)),\r\n    setWeatherAction: (weather, weatherServise) =>\r\n      dispatch(getWeather(weather, weatherServise))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n"]},"metadata":{},"sourceType":"module"}